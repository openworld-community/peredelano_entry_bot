# TODO: get default branch from repo and set it for all steps
# TODO: Optimeze name's of variables/secrets and refactor for most (re)usable
# TODO: optimize time of lint execution
# TODO: lint all code, build and deploy only for push at default branch, for others - lint diff
# TODO: Implement acceptance/testing environment

name: Deployment

env:
  DEFAULT_BRANCH: "spr0sto"
  REGISTRY: ghcr.io
  TAG_NAME: latest
  CACHE_IMAGE_NAME: buildcache

concurrency:
  group: production
  cancel-in-progress: true

on:
#  push:
#    branches:
#      - master
#      - spr0sto
  pull_request:
    types: ['opened', 'edited', 'reopened', 'synchronize']
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read
  packages: write


jobs:

#
#  lint:
#    name: 'Checking code syntax'
#    runs-on: ubuntu-latest
#    steps:

#      - name: 'Checkout Code'
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0

#      - name: 'Lint Code Base'
#        uses: github/super-linter@v4
#        env:
#          DISABLE_ERRORS: false
#          LOG_LEVEL: WARN
#          VALIDATE_ALL_CODEBASE: false
#          IGNORE_GITIGNORED_FILES: true
#          VALIDATE_GITLEAKS: true
#          VALIDATE_DOCKERFILE_HADOLINT: true
#          VALIDATE_PYTHON: true
#          VALIDATE_YAML: true
#          VALIDATE_MARKDOWN: true
#          VALIDATE_GITHUB_ACTIONS: true
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#
#  build-and-push:
#    name: 'Building image and push it to registry'
#    needs: lint
#    timeout-minutes: 5
#    runs-on: ubuntu-latest
#    steps:

#      - name: 'Checkout Code'
#        uses: actions/checkout@v3

#      - name: 'Export lowercase image names'
#        shell: bash
#        # shellcheck disable=2086
#        run: |
#          : "$env.REGISTRY/${{ github.repository }}:latest"
#          echo "IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"
#          : "$env.REGISTRY/${{ github.repository }}/$env.CACHE_IMAGE_NAME:latest"
#          echo "env.CACHE_IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"

#      - name: 'Login to GHCR'
#        uses: docker/login-action@v2
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}

#      - name: 'Set up Docker Buildx'
#        id: buildx
#        uses: docker/setup-buildx-action@v2

#      - name: 'Build and push docker image'
#        uses: docker/build-push-action@v3
#        with:
#          builder: ${{ steps.buildx.outputs.name }}
#          context: ./
#          file: ./Dockerfile
#          tags: "$IMAGE_TAG"
#          push: true
#          cache-from: type=registry,ref=$env.CACHE_IMAGE_TAG
#          cache-to: type=registry,ref=$env.CACHE_IMAGE_TAG,mode=max

#
  deployment:
    name: 'Deploing changes'
#    needs: lint
    runs-on: ubuntu-latest
    environment: production
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}

    steps:

      - name: 'Checkout code'
        uses: actions/checkout@v3

      - name: 'Installing ssh keys'
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh/
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SSH_HOST" > ~/.ssh/known_hosts
          cat >>~/.ssh/config <<END
          Host "$SSH_HOST"
            HostName "$SSH_HOST"
            User "$SSH_USER"
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          END

#      - name: 'Connecting, pulling and reload'
#        env:
#          APP_DIR: ${{ secrets.APP_DIRECTORY }}
#          APP_ENV: ${{ secrets.ENV_PRODUCTION }}
#          REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
#        run: |
#          echo "$APP_ENV">  ~/.ssh/.env
#          ssh "$SSH_USER"@"$SSH_HOST" -C "if [ ! -d $APP_DIR/.git ]; then mkdir -p $APP_DIR && git clone $REPOSITORY $APP_DIR; fi";
#          ssh "$SSH_USER"@"$SSH_HOST" -C "if [ $APP_DIR/.git ]; then cd $APP_DIR && git checkout $DEFAULT_BRANCH && git pull; fi";
#          scp  ~/.ssh/.env "$SSH_USER"@"$SSH_HOST":~/"$APP_DIR"

#          ssh "$SSH_USER"@"$SSH_HOST" -C "cd $APP_DIR && docker compose --file docker-compose.yml build --pull --no-cache";
#          ssh "$SSH_USER"@"$SSH_HOST" -C "cd $APP_DIR && docker compose --file docker-compose.yml up -d";


      - name: Checkout and restart the server
        env:
          APP_DIR: ${{ secrets.APP_DIRECTORY }}
          APP_ENV: ${{ secrets.ENV_PRODUCTION }}
          REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: 22
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: APP_DIR,APP_ENV,REPOSITORY,DEFAULT_BRANCH
          debug: true
          script: |
            if [[ ! -d "$APP_DIR/.git" ]]; then pwd && git clone ${{ github.server_url }}/${{ github.repository }} $APP_DIR ; fi
            if [ -d "$APP_DIR/.git" ]; then git checkout - * && git checkout $DEFAULT_BRANCH && git pull; fi
#            echo "$APP_ENV">  ~/.ssh/.env
#            echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ github.actor }} --password-stdin docker.pkg.github.com
#            docker compose --file docker-compose.yml pull
#            docker logout

#           git checkout master
#           git pull origin master
#           sudo kill $(ps aux | grep gunicorn | grep -v grep | awk ‘{print $2}’)
#           sudo /home/ubuntu/polls/.venv/bin/gunicorn — daemon —  workers=4 mysite.wsgi:application -b 0.0.0.0:80


      - name: 'cleanup'
        run: rm -rf ~/.ssh


                 ### CASE: Build with preferred pulling without cache and reload
                 #docker-compose --file docker-compose.yml build --pull --no-cache;
                 #docker-compose --file docker-compose.yml up -d
                 #docker system prune --all --force;
                 ### CASE: Restart it with rebuild
                 #docker-compose --file docker-compose.yml down --remove-orphans;
                 #docker-compose --file docker-compose.yml up -d --build;
                 #docker system prune --all --force;
