# TODO: get default branch from repo and set it for all steps
# TODO: Optimeze name's of variables/secrets and refactor for most (re)usable
# TODO: optimize time of lint execution
# TODO: lint all code, build and deploy only for push at default branch, for others - lint diff
# TODO: Implement acceptance/testing environment

name: Deployment

concurrency:
  group: production
  cancel-in-progress: true

on:
  push:
    branches:
      - master
      - spr0sto
  workflow_dispatch:

permissions:
  contents: read
  packages: write


jobs:

#
  lint:
    name: 'Checking code syntax'
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout Code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Runing super-linter'
        uses: github/super-linter@v4
        env:
          DISABLE_ERRORS: false
          LOG_LEVEL: WARN
          VALIDATE_ALL_CODEBASE: false
          IGNORE_GITIGNORED_FILES: true
          VALIDATE_GITLEAKS: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_PYTHON: true
          VALIDATE_YAML: true
          VALIDATE_MARKDOWN: true
          VALIDATE_GITHUB_ACTIONS: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#
  build-and-push:
    name: 'Building image and push it to registry'
    needs: lint
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      TAG_NAME: latest
      CACHE_IMAGE_NAME: buildcache

    steps:

      - name: 'Checkout Code'
        uses: actions/checkout@v3

      - name: 'Export lowercase image names'
        shell: bash
        # shellcheck disable=cs2086
        run: |
          : "${{ env.REGISTRY }}/${{ github.repository }}:latest"
          echo "IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"

          : "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.CACHE_IMAGE_NAME }}:latest"
          echo "CACHE_IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"

      - name: 'Login to GHCR'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Set up Docker Buildx'
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: 'Build and push docker image'
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          target: release
          tags: "${{ env.IMAGE_TAG }}"
          push: true
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE_TAG }}
          cache-to: type=registry,ref=${{ env.CACHE_IMAGE_TAG }},mode=max

#
  deployment:
    name: 'Deploing changes'
    needs: [lint, build-and-push]
    runs-on: ubuntu-latest
    environment: production
    env:
      REGISTRY: ghcr.io
      TAG_NAME: latest
      CACHE_IMAGE_NAME: buildcache

    steps:

      - name: 'Checkout code'
        uses: actions/checkout@v3

      - name: 'Checkout and reloading application'
        uses: appleboy/ssh-action@master
        env:
          APP_ENV: ${{ secrets.ENV_PRODUCTION }}
        with:
          host: ${{ secrets.SSH_HOST }}
          port: 22
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: APP_ENV
          debug: true
          script: |
            if [[ ! -d "${{ github.event.repository.name }}/.git" ]]; then git clone ${{ github.server_url }}/${{ github.repository }} ${{ github.event.repository.name }} ; fi
            if [[ -d "${{ github.event.repository.name }}/.git" ]]; then cd ${{ github.event.repository.name }} && git checkout ${{ github.ref_name }} && git pull ; fi
            echo "$APP_ENV">  .env
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            #docker compose --file docker-compose.yml pull
            ### CASE: Build with preferred pulling without cache and reload
            docker-compose --file docker-compose.yml build --pull --no-cache;
            #docker-compose --file docker-compose.yml up -d
            #docker system prune --all --force;
            docker logout

