name: Deployment

concurrency:
  group: production
  cancel-in-progress: true

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [opened, synchronize]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:


#  GitLeaks:
#    name: 'GitLeaks'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#      - name: 'GitLeaks: running'
#        uses: gitleaks/gitleaks-action@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}


  MyPy:
    name: 'MyPy'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2.3.4

      - name: 'Set up python'
        uses: actions/setup-python@v2

      - name: 'Loading cache (if exists)'
        uses: actions/cache@v2.1.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip

      - name: 'Installing'
        run: pip install mypy

      - name: 'Running'
        run: mypy --config-file .mypy.ini ./


  YAMLLint:
    name: 'YAMLLint'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2.3.4

      - name: 'Installing'
        run: python -m pip install yamllint

      - name: 'Running'
        run: yamllint -c .yamllint.yml .


  hadoLint:
    name: 'hadoLint'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - name: 'Running'
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: "Dockerfile"
          recursive: true
          config: ./.hadolint.yaml


  Build:
    name: 'Build'
    needs: [MyPy, YAMLLint, hadoLint]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: github.ref_name == github.event.repository.default_branch
    env:
      REGISTRY: ghcr.io
      TAG_NAME: latest
      CACHE_IMAGE_NAME: buildcache
    steps:

      - uses: actions/checkout@v3

      - name: 'Exporting lowercase image names'
        shell: bash
        # shellcheck disable=cs2086
        run: |
          : "${{ env.REGISTRY }}/${{ github.repository }}:latest"
          echo "IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"
          : "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.CACHE_IMAGE_NAME }}:latest"
          echo "CACHE_IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"
      - name: 'Build: login to GHCR'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Set up docker Buildx'
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: 'Building and push docker image'
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          target: release
          tags: "${{ env.IMAGE_TAG }}"
          push: true
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE_TAG }}
          cache-to: type=registry,ref=${{ env.CACHE_IMAGE_TAG }},mode=max


  Release:
    name: 'Release'
    needs: Build
    runs-on: ubuntu-latest
    if: github.ref_name == github.event.repository.default_branch
    environment: production
    steps:

      - uses: actions/checkout@v3

      - name: 'Checkout and reloading application'
        uses: appleboy/ssh-action@master
        env:
          APP_ENV: ${{ secrets.ENV_PRODUCTION }}
        with:
          host: ${{ secrets.SSH_HOST }}
          port: 22
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: APP_ENV
          debug: true
          script: |
            if [[ ! -d "${{ github.event.repository.name }}/.git" ]]; then git clone ${{ github.server_url }}/${{ github.repository }} ${{ github.event.repository.name }} ; fi
            if [[ -d "${{ github.event.repository.name }}/.git" ]]; then cd ${{ github.event.repository.name }} && git checkout ${{ github.ref_name }} && git pull ; fi
            echo "$APP_ENV">  .env
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker compose --file docker-compose.yml pull
            #docker compose --file docker-compose.yml build --pull --no-cache;
            docker compose --file docker-compose.yml up -d
            docker system prune --all --force;
            docker logout
