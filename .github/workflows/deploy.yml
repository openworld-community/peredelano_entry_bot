# TODO: get default branch from repo and set it for all steps
# TODO: Optimeze name's of variables/secrets and refactor for most (re)usable
# TODO: optimize time of lint execution
# TODO: lint all code, build and deploy only for push at default branch, for others - lint diff
# TODO: Implement acceptance/testing environment

name: Deployment

concurrency:
  group: production
  cancel-in-progress: true

on:
#  push:
#    branches:
#      - master
#      - spr0sto
  pull_request:
    types: ['opened', 'edited', 'reopened', 'synchronize']
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  TAG_NAME: latest
  CACHE_IMAGE_NAME: buildcache
  ENV_PRODUCTION: "${{secrets.ENV_PRODUCTION}}"
  APP_DIRECTORY: "${{secrets.APP_DIRECTORY}}"

jobs:

#
  lint:
    name: 'Check code syntax'
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout Code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Lint Code Base'
        uses: github/super-linter@v4
        env:
          DISABLE_ERRORS: false
          LOG_LEVEL: WARN
          VALIDATE_ALL_CODEBASE: false
          IGNORE_GITIGNORED_FILES: true
          VALIDATE_GITLEAKS: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_PYTHON: true
          VALIDATE_YAML: true
          VALIDATE_MARKDOWN: true
          VALIDATE_GITHUB_ACTIONS: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#
  build-and-push:
    name: 'Build image and push it to registry'
    needs: lint
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout Code'
        uses: actions/checkout@v3

      - name: 'Export lowercase image names'
        shell: bash
        # shellcheck disable=2086
        run: |
          : "${{ env.REGISTRY }}/${{ github.repository }}:latest"
          echo "IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"
          : "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.CACHE_IMAGE_NAME }}:latest"
          echo "CACHE_IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"

      - name: 'Login to GHCR'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Set up Docker Buildx'
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: 'Build and push docker image'
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          tags: "${{ env.IMAGE_TAG }}"
          push: true
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE_TAG }}
          cache-to: type=registry,ref=${{ env.CACHE_IMAGE_TAG }},mode=max

#
  deployment:
    name: 'Deploy changes'
    needs: lint
    runs-on: ubuntu-latest
    environment: production
    steps:

      - name: 'Checkout code'
        uses: actions/checkout@v3

      - name: 'install ssh keys'
        env:
          SSH_USER: ${{secrets.SSH_USER}}
          SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_HOST: ${{secrets.SSH_HOST}}
        run: |
          mkdir -p ~/.ssh/
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SSH_HOST" > ~/.ssh/known_hosts
          cat >>~/.ssh/config <<END
          Host "$SSH_HOST"
            HostName "$SSH_HOST"
            User "$SSH_USER"
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          END
          cat ~/.ssh/config | sed 's/ //g'
          cat ~/.ssh/id_rsa | sed 's/./& /g'

      - name: 'connect and pull'
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          APP_DIRECTORY: ${{ secrets.APP_DIRECTORY }}
        run: |
          echo "APP_DIRECTORY: $APP_DIRECTORY"
          echo "SSH_HOST: $SSH_HOST"
          echo "SSH_KEY: $SSH_KEY"
          echo "SSH_USER: $SSH_USER"
#          ssh "$SSH_USER"@"$SSH_HOST" < "if [ ! -d $APP_DIRECTORY/.git ]; then mkdir -p $APP_DIRECTORY && git clone https://github.com/openworld-community/peredelano_entry_bot.git $APP_DIRECTORY; fi";
#          ssh "$SSH_USER"@"$SSH_HOST" < "if [ $APP_DIRECTORY/.git ]; then cd $APP_DIRECTORY && git checkout spr0sto && git pull && git status; fi";

      - name: 'cleanup'
        run: rm -rf ~/.ssh

#        uses: D3rHase/ssh-command-action@v0.2.2
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{secrets.SSH_HOST}}
#          username: ${{secrets.SSH_USER}}
#          key: ${{secrets.SSH_PRIVATE_KEY}}
#          port: 22
#          command: |
#                 mkdir -p peredelano_entry_bot && cd peredelano_entry_bot && pwd &&
#                 git clone https://github.com/openworld-community/peredelano_entry_bot.git . && ls -la &&
#                 git checkout master && git pull && git status && ls -la;
#                 mkdir -p "${{secrets.APP_DIRECTORY}}" && cd "${{secrets.APP_DIRECTORY}}" &&
#                 git clone https://github.com/openworld-community/peredelano_entry_bot.git . &&
#                 git checkout master &&
#                 git pull;
#                 echo "${{secrets.ENV_PRODUCTION}}" | base64 -d > .env
#                 docker build -t peredelanobot .
#                 docker stop peredelanobot
#                 docker run -d --name peredelanobot --rm peredelanobot
                 ### CASE: Build with preferred pulling without cache and reload
                 #docker-compose --file docker-compose.yml build --pull --no-cache;
                 #docker-compose --file docker-compose.yml up -d
                 #docker system prune --all --force;
                 ### CASE: Restart it with rebuild
                 #docker-compose --file docker-compose.yml down --remove-orphans;
                 #docker-compose --file docker-compose.yml up -d --build;
                 #docker system prune --all --force;
