name: Deployment

concurrency:
  group: production
  cancel-in-progress: true

on:
  push:
    branches:
#      - master
       - spr0sto
  pull_request:
    types: ['opened', 'edited', 'reopened', 'synchronize']
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  TAG_NAME: latest
  CACHE_IMAGE_NAME: buildcache
  ENV_PRODUCTION: "${{secrets.ENV_PRODUCTION}}"
  APP_DIRECTORY: "${{secrets.APP_DIRECTORY}}"

jobs:

#
  lint:
    name: 'Check code syntax'
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout Code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Lint Code Base'
        uses: github/super-linter@v4
        env:
          DISABLE_ERRORS: false
          LOG_LEVEL: WARN
          VALIDATE_ALL_CODEBASE: true
          IGNORE_GITIGNORED_FILES: true
          VALIDATE_GITLEAKS: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_PYTHON: true
          VALIDATE_YAML: true
          VALIDATE_MARKDOWN: true
          VALIDATE_GITHUB_ACTIONS: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#
  build-and-push:
    name: 'Build image and push it to registry'
    needs: lint
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout Code'
        uses: actions/checkout@v3

      - name: 'Export lowercase image names'
        shell: bash
        # shellcheck disable=2086
        run: |
          : "${{ env.REGISTRY }}/${{ github.repository }}:latest"
          echo "IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"
          : "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.CACHE_IMAGE_NAME }}:latest"
          echo "CACHE_IMAGE_TAG=${_,,}" | tee -a "$GITHUB_ENV"

      - name: 'Login to GHCR'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Set up Docker Buildx'
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: 'Build and push docker image'
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          tags: "${{ env.IMAGE_TAG }}"
          push: true
          cache-from: type=registry,ref=${{ env.CACHE_IMAGE_TAG }}
          cache-to: type=registry,ref=${{ env.CACHE_IMAGE_TAG }},mode=max

#
  deployment:
    name: 'Deploy changes'
    needs: lint
    runs-on: ubuntu-latest
    environment: production
    steps:

      - name: 'Checkout code'
        uses: actions/checkout@v3

      - name: 'Run command on remote server'
        uses: D3rHase/ssh-command-action@v0.2.2
        with:
          host: ${{secrets.SSH_HOST}}
          user: ${{secrets.SSH_USER}}
          private_key: ${{secrets.SSH_PRIVATE_KEY}}
          command: |
                 mkdir -p "${{secrets.APP_DIRECTORY}}" && cd "${{secrets.APP_DIRECTORY}}";
                 git checkout master;
                 git pull;
                 echo "${{secrets.ENV_PRODUCTION}}" > .env
#                 docker build -t peredelanobot .
#                 docker stop peredelanobot
#                 docker run -d --name peredelanobot --rm peredelanobot
                 ### CASE: Build with preferred pulling without cache and reload
                 #docker-compose --file docker-compose.yml build --pull --no-cache;
                 #docker-compose --file docker-compose.yml up -d
                 #docker system prune --all --force;
                 ### CASE: Restart it with rebuild
                 #docker-compose --file docker-compose.yml down --remove-orphans;
                 #docker-compose --file docker-compose.yml up -d --build;
                 #docker system prune --all --force;
